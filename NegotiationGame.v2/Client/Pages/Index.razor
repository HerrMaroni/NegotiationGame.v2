@page "/"
@using NegotiationGame.v2.Client.Service
@using NegotiationGame.v2.Shared
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.False" Class="my-16 pt-16">
    <MudGrid>
        <MudItem xs="12" sm="12" md="7">
            <MudPaper Elevation="3" Class="pa-4 rounded-lg">
                <div class="px-5 py-3 mb-2">
                    <MudText Typo="Typo.h5">Create a Room</MudText>
                </div>
                <div class="mx-4 px-2">
                    <MudForm @ref="_form" @bind-IsValid="@_success">
                        <MudTextField @bind-Value="NewRoomName"
                                      T="string"
                                      Label="Room name"
                                      HelperText="Enter a room name"
                                      Disabled="@(_creatingRoom || !GameClient.IsConnected)"
                                      Required="true"
                                      Validation="@(new Func<string, IEnumerable<string>>(RoomPinValidator.IsValidRoomName))"
                                      RequiredError="Room name is required!"/>
                        <MudTextField @bind-Value="NewRoomPin"
                                      T="string"
                                      Label="PIN"
                                      HelperText="Enter a 4 digit PIN for the room"
                                      Disabled="@(_creatingRoom || !GameClient.IsConnected)"
                                      Required="true"
                                      Validation="@(new Func<string, IEnumerable<string>>(RoomPinValidator.IsValidPin))"
                                      RequiredError="PIN is required!"/>
                        <div class="d-flex align-center justify-space-between mt-6">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success || !GameClient.IsConnected)" Class="ml-auto" OnClick="@(async () => await CreateRoomAsync())">Create room</MudButton>
                        </div>
                    </MudForm>
                </div>
            </MudPaper>
            <MudPaper Elevation="3" Class="pa-4 mt-4 rounded-lg">
                <div class="px-5 py-3 mb-2">
                    <MudText Typo="Typo.h5">Available rooms</MudText>
                </div>
                @if (GameClient.Rooms.Any())
                {
                    <MudGrid Spacing="1">
                        @foreach (var room in GameClient.Rooms)
                        {
                            <MudItem  xs="12" sm="12" md="12" lg="6" xl="4" xxl="3" @key="room.Id">
                                <MudPaper Class="mud-theme-info pa-2 mud-width-full">
                                    <MudStack>
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudText Typo="Typo.h6">@room.Name</MudText>
                                            <MudText Typo="Typo.body2">@room.Host.Name</MudText>
                                            <MudText Typo="Typo.body2">@room.Date.ToString("HH:mm:ss")</MudText>
                                        </MudStack>
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                            <MudText Typo="Typo.subtitle1">Players:</MudText>
                                            @foreach (var (user, index) in room.Users.Select((u, i) => (u, i)))
                                            {
                                                <MudText Typo="Typo.body2"><i>@user.Name</i></MudText>
                                                @if (index == room.Users.Count - 1)
                                                {
                                                    continue;
                                                }
                                                @:<MudText Typo="Typo.body2">,</MudText>
                                            }
                                            <MudSpacer/>
                                            @if (_selectedRoom == room)
                                            {
                                                <form @onsubmit="() => EnterRoomAsync(room)">
                                                    <input class="form-control"
                                                           @bind="EnterRoomPin"
                                                           @bind:event="oninput"
                                                           disabled="@(_enteringRoom || !GameClient.IsConnected)"
                                                           placeholder="Enter the 4 digit PIN for the room to enter"/>
                                                    <button class="btn btn-secondary" type="submit" disabled="@(_enteringRoom || !GameClient.IsConnected)">Enter room</button>
                                                    @if (_enterRoomError != null)
                                                    {
                                                        <p class="text-danger small">@_enterRoomError <b style="cursor: pointer" @onclick="() => _enterRoomError = null">X</b></p>
                                                    }
                                                </form>
                                            }
                                            else if (!room.Started && room.Users.All(u => u.Id != _userId))
                                            {
                                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Warning" Class="mr-auto">Enter</MudButton>
                                                @* <a class="btn btn-success" @onclick="() => { _selectedRoom = room; _enterRoomError = null; }">Enter room</a> *@
                                            }
                                            @if (room.Users.Any(u => u.Id == _userId))
                                            {
                                                <a href="/game/@room.Id">GO BACK</a>
                                            }
                                        </MudStack>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <div class="mx-4 px-2">
                        <MudText Typo="Typo.h6">No rooms yet :'(</MudText>
                        <MudText Typo="Typo.body1">Create one!</MudText>
                    </div>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="5">
            <MudPaper Elevation="3" Class="pb-4 mud-height-full rounded-lg">
                <div class="px-5 py-3 mb-2  battleship-lobby-card-header">
                    <MudText Typo="Typo.h5">How does the game work?</MudText>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Inject] GameClient GameClient { get; set; } = default!;
    [Inject] IJSRuntime JsRuntime { get; set; } = default!;
    ElementReference ChatInput { get; set; }
    bool _chatMessageSending = false;
    string _chatMessage = "";

    protected override async Task OnInitializedAsync()
    {
        GameClient.StateHasChanged += StateHasChanged;
        await GameClient.InvokeAsync(h => h.UpdateRoomsAsync());
        _userId = await GameClient.InvokeAsync(h => h.GetUserIdAsync());
    }

    public void Dispose()
    {
        GameClient.StateHasChanged -= StateHasChanged;
    }

    async Task SendChatMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(_chatMessage) || _chatMessageSending || !GameClient.IsConnected)
            return;

        _chatMessageSending = true;
        await GameClient.InvokeAsync(h => h.SendMessageToLobbyAsync(_chatMessage));
        _chatMessageSending = false;
        _chatMessage = "";
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("focus", ChatInput);
    }
    
    bool _success;
    MudForm _form;
    
    string _userId;

    private string NewRoomName { get; set; } = default!;
    private string NewRoomPin { get; set; } = default!;

    bool _creatingRoom = false;

    [Inject] NavigationManager NavigationManager { get; set; } = default!;

    async Task CreateRoomAsync()
    {
        if (!GameClient.IsConnected)
            return;

        _creatingRoom = true;
        try
        {
            var room = await GameClient.InvokeAsync(h => h.CreateRoomAsync(NewRoomPin, NewRoomName));
            NavigationManager.NavigateTo($"/game/{room.Id}");
        }
        finally
        {
            _creatingRoom = false;
        }
    }

    bool _enteringRoom = false;
    Room _selectedRoom;

    string _enterRoomPin;
    string EnterRoomPin
    {
        get => _enterRoomPin;
        set => _enterRoomPin = (value == null || (value.Length <= 4 && value.All(c => int.TryParse(c.ToString(), out _)))) ? value : _enterRoomPin;
    }

    string? _enterRoomError;

    async Task EnterRoomAsync(Room room)
    {
        if (_enteringRoom || !GameClient.IsConnected)
            return;

        _enteringRoom = true;
        var result = await GameClient.InvokeAsync(h => h.EnterRoomAsync(room.Id, EnterRoomPin));
        _enterRoomError = result switch
        {
            EnterRoomResult.InvalidRoomId => "Invalid room ID.",
            EnterRoomResult.InvalidPin => "Invalid PIN.",
            EnterRoomResult.GameAlreadyInProgress => "The game is already in progress",
            _ => null
        };
        if (result is EnterRoomResult.UserAlreadyInRoom or EnterRoomResult.Ok)
            NavigationManager.NavigateTo($"/game/{room.Id}");

        _enteringRoom = false;
        _enterRoomPin = "";
    }
}
